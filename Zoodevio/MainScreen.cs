using System;
using System.IO;
using System.Windows.Forms;
using Zoodevio.DataModel;
using Zoodevio.DataModel.Objects;

namespace Zoodevio
{
    public partial class MainScreen : Form
    {
        private bool _searchViewToggle = true;
        private bool _metadataViewToggle = true;

        private MainScreenManager _mainManager;

        // application children control accessors
        public BasicSearchControl BasicSearchControl { get { return basicSearchControl; } }
        public GridViewControl GridViewControl { get { return gridViewControl; } }
        public LibraryPanelControl LibraryPanelControl { get { return libraryPanelControl; } }
        public MetadataViewControl MetadataViewControl { get { return metadataViewControl; } }

        public MainScreen()
        {
            InitializeComponent();
            SetupManagers();
            _mainManager.LibraryManager.RefreshLibraryFromDatabase();

            hideMetadataToolStripMenuItem_Click(null, null);
        }

        // Setups the manager for the MainScreenManager
        private void SetupManagers()
        {
            _mainManager = new MainScreenManager(this);
        }

        #region Screen Lifecycle

        private void MainScreen_Load(object sender, EventArgs e)
        {

        }

        private void metadataViewControl_Load(object sender, EventArgs e)
        {

        }

        #endregion

        #region Context Menu

        #region View

        private void hideMetadataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // swap the toggle, and then set the value to the control
            Console.WriteLine("Toggled Metadata : " + !_metadataViewToggle);
            _metadataViewToggle = !_metadataViewToggle;
            metadataViewControl.Visible = _metadataViewToggle;
            tableLayoutPanel2.ColumnStyles[1].Width = _metadataViewToggle ? 41 : 0;
        }

        private void hideSearchAreaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Console.WriteLine("Toggled Search Area : " + !_searchViewToggle);
            _searchViewToggle = !_searchViewToggle;
            basicSearchControl.Visible = _searchViewToggle;
            tableLayoutPanel1.RowStyles[1].Height = _searchViewToggle ? 25 : 0;
        }


        #endregion

        #region Settings

        private void setLibraryRootToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /** SET NEW LIBRARY ROOT **/

            // Start a folder browser dialog window to select root
            FolderBrowserDialog fbd = new FolderBrowserDialog();
            DialogResult result = fbd.ShowDialog();

            // If the folder browser dialog was a success:
            if (result == DialogResult.OK)
            {
                // Get the selected path for the root
                string rootURL = fbd.SelectedPath;

                // Pass to main screen manager to interact with DB
                 try { 

                    _mainManager.SetLibraryRoot(rootURL);
                    _mainManager.LibraryManager.RefreshLibraryFromDatabase();
                    _mainManager.FileManager.ClearView();
                    MessageBox.Show("Successfully set new library root!",
                        "Zoodevio Video Library",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.None);
                 }
                 catch (Exception ex)
                 {
                     Console.WriteLine(ex.StackTrace);
                     MessageBox.Show("Failed to set new library root.",
                         "Zoodevio Video Library",
                         MessageBoxButtons.OK,
                         MessageBoxIcon.Exclamation);
                     throw ex;
                 }

               // _mainManager.SetLibraryRoot(rootURL);
               // _mainManager.LibraryManager.RefreshLibraryFromDatabase();
            }
        }

        private void preferencesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /** OPEN PREFERENCES DIALOG **/
            PreferenceScreen prefs = new PreferenceScreen();
            prefs.StartPosition = FormStartPosition.CenterParent;
            prefs.ShowDialog(); 

        }

        private void customTagsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CustomTagsScreen tags = new CustomTagsScreen();
            tags.StartPosition = FormStartPosition.CenterParent;
            tags.ShowDialog();
        }

        private void addFilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /** ADD A FILE **/
            OpenFileDialog diag = new OpenFileDialog();
            // TODO: Use autogenerated list 
            diag.Filter = "Video Files|*.mp4;*.avi;*.mov;*.flv;*.mkv";
            diag.Title = "Add Files to Library";
            diag.Multiselect = true;
            DialogResult userClickedOk = diag.ShowDialog();
            if (userClickedOk == DialogResult.OK)
            {
                this.Enabled = false;
                Cursor.Current = Cursors.WaitCursor; 
                // get the root library path
                Folder root = Folders.GetFolder(Folders.ROOT_ID); 
                // copy the selected files into the library, and add them to the database 
                foreach (string file in diag.FileNames)
                {
                    try
                    {
                        string fullPath = root.Name + file.Substring(file.LastIndexOf("\\"));
                        Console.WriteLine(fullPath);
                        File.Copy(file, fullPath);
                        VideoFile fileEntry = new VideoFile(
                            fullPath, MainScreenManager.GetDefaultTags(new FileInfo(fullPath)));
                        Files.AddFile(fileEntry, 1, false);
                        fileEntry = Files.GetFile(Database.GetLastInsertID("files"));
                        Files.AssociateFileLocation(fileEntry, 1);

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                        MessageBox.Show("Error: Unable to copy file " + file + " to library."); 
                    }
                }
                // refresh the database
                _mainManager.LibraryManager.RefreshLibraryFromDatabase();
                this.Enabled = true;
                Cursor.Current = Cursors.Default; 
            }
        }

        private void addFolderToolStripMenuItem_Click(Object sender, EventArgs e)
        {
            /** ADD A WHOLE FOLDER **/
            FolderBrowserDialog diag = new FolderBrowserDialog();
            // TODO: Use autogenerated list 
            DialogResult userClickedOk = diag.ShowDialog();
            if (userClickedOk == DialogResult.OK)
            {
                this.Enabled = false;
                Cursor.Current = Cursors.WaitCursor;
                // get the root library path
                Folder root = Folders.GetFolder(Folders.ROOT_ID);
                string shortDir = diag.SelectedPath.Substring(diag.SelectedPath.LastIndexOf("\\")); 
                // copy the selected folder into the library, and add everything in it to the database
                string fullDir = root.Name + "\\" + shortDir;
                int fId;
                if (!Directory.Exists(fullDir))
                {
                    Directory.CreateDirectory(fullDir);
                    Folder newFolder = new Folder(Folders.ROOT_ID, shortDir);
                    Folders.AddFolder(newFolder, false);
                    fId = Database.GetLastInsertID("folders");
                }
                else
                {
                    fId = Folders.GetFoldersByName(shortDir)[0].Id; 
                }
                string[] files = Directory.GetFiles(diag.SelectedPath);
                foreach (string file in files)
                {
                    try
                    {
                        string fullPath = root.Name + file.Substring(file.LastIndexOf("\\"));
                        Console.WriteLine(fullPath);
                        File.Copy(file, fullPath);
                        VideoFile fileEntry = new VideoFile(
                            fullPath, MainScreenManager.GetDefaultTags(new FileInfo(fullPath)));
                        Files.AddFile(fileEntry, fId, false);
                        fileEntry = Files.GetFile(Database.GetLastInsertID("files"));
                        Files.AssociateFileLocation(fileEntry, fId);

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: Unable to copy file " + file + " to library.");
                    }
                }
                // refresh the database
                _mainManager.LibraryManager.RefreshLibraryFromDatabase();
                this.Enabled = true;
                Cursor.Current = Cursors.Default;
            }
        }

        // deletes a highlighted folder 
        private void deleteFolderToolStripMenuItem_Click(Object sender, EventArgs e)
        {
            FolderDeleteScreen screen = new FolderDeleteScreen();
            screen.StartPosition = FormStartPosition.CenterParent;
            screen.ShowDialog(); 
            _mainManager.LibraryManager.RefreshLibraryFromDatabase();

        }

        #endregion

        #region Debug

        private void forceFolderHiarchyRefreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _mainManager.LibraryManager.RefreshLibraryFromDatabase();
        }

        #endregion

        #endregion

        public void OpenMetadataPanel()
        {
            _metadataViewToggle = true;
            metadataViewControl.Visible = true;
            tableLayoutPanel2.ColumnStyles[1].Width = _metadataViewToggle ? 41 : 0;
        }

        private void button1_Click(object sender, EventArgs e)
        {

        }

        private void libraryPanelControl_Load(object sender, EventArgs e)
        {

        }

        private void basicSearchControl_Load(object sender, EventArgs e)
        {

        }
    }
}
